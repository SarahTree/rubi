#include "parser.h"

void d_expr_prim1(){
	| mov eax, atoi(tok.tok[tok.pos++].val)
}

void d_expr_prim2(){
	| mov eax, tok.tok[tok.pos++].val[0]
}

void d_expr_prim3(){
	| mov eax, getString()
}

void d_expr_prim4(){
	| mov ecx, eax
}

void d_expr_prim5(Variable *v){
	| mov edx, [ebp - v->id*4]
}

void d_expr_prim6(Variable *v){
	| mov edx, [v->id]
}

void d_expr_prim7(){
	| mov eax, [edx + ecx * 4]
}

void d_expr_prim8(){
	| movzx eax, byte [edx + ecx]
}

void d_expr_prim9(){
	| push eax
}

void d_expr_prim10(func_t *function){
	| call =>function->address
    | add esp, function->args * sizeof(int32_t)
}

void d_expr_prim11(Variable *v){
	| mov eax, [ebp - v->id*4]
}

void d_expr_prim12(Variable *v){
	| mov eax, [v->id]
}

void d_expr_prim13(){
	| mov ecx, eax
    skip("[");
    compExpr();
    skip("]");
    | mov eax, [ecx + eax*4]
}

void d_expr_mulDiv1(){
	| push eax
}
void d_expr_mulDiv2(int32_t mul,int32_t div){
    | mov ebx, eax
    | pop eax
    if (mul) {
        | imul ebx
    } else if (div) {
        | xor edx, edx
        | idiv ebx
    } else { /* mod */
        | xor edx, edx
        | idiv ebx
        | mov eax, edx
    }
 
}

void d_expr_addsub1(){
    | push eax
}

void d_expr_addsub2(int32_t add){
    | mov ebx, eax
    | pop eax
    if (add) {
        | add eax, ebx
    } else {
        | sub eax, ebx
    }
}

void d_expr_logic1(){
	| push eax
}

void d_expr_logic2(int32_t lt,int32_t gt,int32_t ne,int32_t eql,int32_t fle){ 
    | mov ebx, eax
    | pop eax
    | cmp eax, ebx
    if (lt)
        | setl al
    else if (gt)
        | setg al
    else if (ne)
        | setne al
    else if (eql)
        | sete al
    else if (fle)
        | setle al
    else
        | setge al
    | movzx eax, al
}

void d_expr_com1(){
	| push eax
}

void d_expr_com2(int32_t and,int32_t or){
    | mov ebx, eax
    | pop eax
    if (and)
        | and eax, ebx
    else if (or)
        | or eax, ebx
    else
        | xor eax, ebx
}



















